// Demo Code for Heatshrink (Copyright (c) 2013-2015, Scott Vokes <vokes.s@gmail.com>)
// embedded compression library
// Craig Versek, Apr. 2016

#include <stdint.h>
#include <ctype.h>
#include <Arduino.h>
#include <String.h>

#include <heatshrink_encoder.h>
#include <heatshrink_decoder.h>
#include <greatest.h>

#define arduinoLED 13   // Arduino LED on board

/******************************************************************************/
// TEST CODE from adapted from test_heatshrink_dynamic.c
#if !HEATSHRINK_DYNAMIC_ALLOC
#error Must set HEATSHRINK_DYNAMIC_ALLOC to 1 for dynamic allocation test suite.
#endif

typedef struct {
    uint8_t log_lvl;
    uint8_t window_sz2;
    uint8_t lookahead_sz2;
    size_t decoder_input_buffer_size;
} cfg_info;


static void dump_buf(char *name, uint8_t *buf, uint16_t count) {
    for (int i=0; i<count; i++) {
        uint8_t c = (uint8_t)buf[i];
        printf("%s %d: 0x%02x ('%c')\n", name, i, c, isprint(c) ? c : '.');
    }
}

static void decompress_and_expand_and_check(uint8_t *comp, uint32_t input_size, cfg_info *cfg, size_t polled2) {

    Serial.print(F("\n^^ Processing\n"));
    heatshrink_decoder *hsd = heatshrink_decoder_alloc(cfg->decoder_input_buffer_size,
        cfg->window_sz2, cfg->lookahead_sz2);

    size_t decomp_sz = input_size + (input_size/10) + 4;
    uint8_t *decomp = (uint8_t*)malloc(decomp_sz);
    if (decomp == NULL) 
      Serial.println(F("FAIL: Malloc fail!"));
    memset(decomp, 0, decomp_sz);
    
    size_t compressed_size = polled2;
    size_t count  = polled2;
    size_t sunk = 0;
    size_t polled = 0;
    
    if (cfg->log_lvl > 1) {
        Serial.print(F("\n^^ DECOMPRESSING\n"));
        dump_buf("comp", comp, compressed_size);
    }
    while (sunk < compressed_size) {
        heatshrink_decoder_sink(hsd, &comp[sunk], compressed_size - sunk, &count);
        sunk += count;
        if (cfg->log_lvl > 1){
          Serial.print(F("^^ sunk "));
          Serial.print(count);
          Serial.print(F("\n"));
        }
        if (sunk == compressed_size) {
            heatshrink_decoder_finish(hsd);
        }

        HSD_poll_res pres;
        do {
            pres = heatshrink_decoder_poll(hsd, &decomp[polled], decomp_sz - polled, &count);
            polled += count;
            if (cfg->log_lvl > 1){
              Serial.print(F("^^ polled "));
              Serial.print(count);
              Serial.print(F("\n"));
            }
        } while (pres == HSDR_POLL_MORE);
        if (sunk == compressed_size) {
            HSD_finish_res fres = heatshrink_decoder_finish(hsd);
        }

        if (polled > input_size) {
            Serial.print(F("nExpected "));
            Serial.print((size_t)input_size);
            Serial.print(F(" got: "));
            Serial.print(polled);
            Serial.print(F(" \n")); 
            Serial.print(F("FAIL: Decompressed data is larger than original input!"));
        }
    }
   
    if (polled != input_size) {
        Serial.print(F("polled: "));
        Serial.print(polled);
        Serial.print(F(" \n")); 
        Serial.print(F("input size: "));
        Serial.print(input_size);
        Serial.print(F(" \n")); 
        Serial.print(F("FAIL: Decompressed length does not match original input length!"));
    }

    if (cfg->log_lvl > 1) dump_buf("decomp", decomp, polled);

    if (cfg->log_lvl > 0){
        Serial.print(F("in: "));
        Serial.print(compressed_size);
        Serial.print(F(" decompressed: "));
        Serial.print(polled);
        Serial.print(F(" \n")); 

        Serial.print("Decompressed data: ");
        for(int i = 0; i < polled; i++){
          Serial.print(decomp[i]);
          Serial.print(", ");
        }
        Serial.println();
    }

    free(decomp);
    heatshrink_decoder_free(hsd);
}



/******************************************************************************/

int main(int argc, char **argv)
{
    init(); // this is needed

    pinMode(arduinoLED, OUTPUT);      // Configure the onboard LED for output
    digitalWrite(arduinoLED, LOW);    // default to LED off
    Serial.begin(9600);
    size_t polled = 0;
    
    ///////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////Test Decompression////////////////////////////////////////////

    //////////////////////////584
//    uint8_t orig_angka [] = {152, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 130, 192, 0};
//    uint8_t orig_angka [] = {158, 75, 236, 150, 155, 180, 248, 184, 138, 65, 105, 178, 79, 107, 146, 43, 29, 190, 217, 108, 176, 220, 46, 118, 90, 252, 201, 102, 65, 99, 81, 185, 220, 231, 183, 139, 117, 230, 105, 53, 154, 94, 111, 39, 55, 27, 196, 214, 203, 55, 67, 186, 93, 103, 51, 139, 197, 158, 203, 57, 184, 89, 45, 22, 27, 36, 214, 227, 51, 187, 89, 44, 118, 107, 61, 162, 102, 9, 56, 181, 93, 111, 22, 59, 116, 230, 237, 100, 178, 77, 173, 214, 215, 27, 24, 13, 186, 239, 100, 185, 77, 231, 54, 43, 29, 218, 199, 116, 178, 93, 172, 147, 59, 173, 206, 237, 57, 184, 218, 173, 119, 169, 173, 174, 105, 117, 155, 93, 174, 150, 139, 13, 174, 109, 113, 186, 93, 239, 22, 171, 189, 222, 195, 98, 177, 89, 173, 211, 155, 20, 214, 233, 51, 187, 93, 108, 243, 59, 197, 142, 213, 112, 184, 77, 109, 115, 139, 29, 226, 218, 35, 52, 178, 28, 176, 221, 109, 179, 105, 165, 182, 105, 107, 180, 88, 110, 183, 43, 52, 218, 233, 122, 184, 222, 102, 119, 123, 181, 206, 221, 122, 177, 77, 236, 55, 137, 173, 194, 241, 50, 176, 221, 174, 86, 91, 173, 134, 205, 53, 181, 93, 238, 151, 105, 156, 226, 101, 118, 187, 90, 44, 150, 59, 12, 218, 221, 55, 189, 77, 166, 87, 155, 141, 138, 199, 118, 181, 77, 231, 23, 91, 44, 218, 109, 107, 184, 206, 46, 55, 171, 21, 134, 219, 103, 177, 219, 237, 150, 203, 13, 194, 231, 101, 144, 35, 200, 45, 54, 234, 228, 138, 125, 60, 178, 90, 110, 210, 11, 29, 178, 195, 115, 185, 207, 90, 110, 22, 27, 117, 150, 217, 45, 177, 91, 236, 151, 153, 2, 140, 182, 99, 53, 174, 72, 167, 212, 203, 125, 202, 203, 109, 144, 90, 110, 23, 59, 169, 77, 146, 223, 108, 105, 144, 92, 237, 55, 73, 5, 134, 219, 101, 186, 75, 36, 22, 91, 154, 85, 154, 205, 101, 185, 24, 219, 236, 119, 91, 149, 201, 6, 202, 146, 131, 44, 144, 92, 236, 182, 73, 5, 186, 203, 32, 183, 220, 172, 55, 75, 77, 190, 65, 100, 178, 219, 44, 182, 235, 77, 210, 65, 115, 41, 17, 185, 32, 203, 164, 214, 235, 21, 206, 225, 59, 158, 75, 236, 150, 155, 180, 248, 184, 138, 65, 105, 178, 79, 107, 146, 43, 29, 190, 217, 108, 176, 220, 46, 118, 90, 252, 201, 102, 65, 99, 81, 185, 220, 231, 168, 55, 11, 13, 186, 203, 108, 150, 216, 237, 246, 199, 155, 133, 206, 203, 32, 71, 144, 90, 109, 213, 201, 20, 250, 121, 100, 180, 221, 164, 22, 59, 101, 134, 231, 115, 158, 180, 220, 44, 54, 235, 45, 178, 91, 98, 183, 217, 47, 50, 5, 25, 108, 198, 107, 92, 145, 79, 169, 150, 251, 149, 150, 231, 117, 182, 200, 44, 150, 251, 98, 76, 130, 231, 105, 186, 72, 44, 54, 219, 45, 210, 89, 32, 178, 220, 210, 172, 214, 107, 45, 200, 198, 223, 99, 186, 220, 174, 72, 54, 84, 148, 25, 100, 130, 231, 101, 178, 72, 45, 214, 91, 45, 205, 166, 195, 102, 179, 89, 110, 70, 54, 251, 29, 214, 229, 114, 18, 178, 192, 0};

//    uint8_t orig_angka [] = {158, 75, 236, 150, 155, 180, 248, 5, 6, 1, 0, 164, 22, 155, 36, 246, 185, 34, 177, 219, 237, 150, 203, 13, 194, 231, 101, 175, 204, 171, 146, 41, 5, 142, 217, 97, 185, 220, 231, 183, 139, 117, 230, 105, 53, 154, 94, 111, 55, 139, 117, 198, 241, 53, 178, 205, 192, 128, 59, 165, 214, 115, 56, 188, 89, 236, 179, 155, 133, 146, 209, 97, 178, 77, 110, 51, 59, 181, 146, 199, 102, 179, 218, 38, 96, 0, 36, 226, 213, 117, 188, 88, 237, 211, 155, 181, 146, 201, 54, 183, 91, 102, 115, 59, 29, 142, 199, 110, 187, 217, 46, 83, 121, 205, 138, 199, 118, 177, 221, 44, 151, 107, 36, 206, 235, 115, 187, 78, 110, 54, 171, 93, 234, 107, 107, 154, 93, 102, 215, 107, 165, 162, 195, 107, 155, 92, 110, 151, 123, 197, 170, 239, 119, 176, 216, 172, 86, 107, 116, 230, 197, 53, 186, 76, 238, 215, 91, 60, 206, 241, 99, 181, 92, 46, 19, 91, 92, 226, 199, 120, 182, 216, 239, 19, 75, 36, 226, 199, 112, 154, 221, 109, 179, 105, 165, 182, 105, 107, 180, 88, 110, 183, 43, 52, 218, 233, 122, 184, 222, 102, 119, 123, 181, 206, 221, 122, 177, 77, 236, 55, 137, 173, 194, 241, 50, 176, 221, 174, 86, 91, 173, 134, 205, 53, 181, 93, 238, 151, 105, 156, 226, 101, 118, 187, 90, 44, 150, 59, 12, 218, 221, 55, 189, 77, 166, 87, 155, 136, 254, 5, 106, 155, 206, 46, 182, 89, 180, 218, 215, 113, 156, 92, 111, 86, 43, 13, 182, 206, 118, 3, 200, 0, 128, 139, 77, 186, 185, 34, 67, 65, 79, 176, 90, 228, 138, 225, 97, 183, 89, 109, 146, 219, 21, 190, 201, 121, 144, 92, 44, 50, 217, 140, 212, 31, 2, 166, 91, 238, 86, 91, 108, 130, 211, 112, 185, 221, 109, 178, 11, 37, 190, 217, 111, 185, 72, 46, 118, 155, 164, 130, 195, 109, 178, 221, 37, 146, 11, 45, 204, 9, 2, 179, 89, 172, 183, 43, 164, 130, 223, 99, 186, 220, 174, 86, 91, 149, 150, 233, 32, 177, 221, 101, 146, 11, 157, 150, 201, 32, 183, 89, 100, 22, 251, 149, 134, 233, 105, 183, 200, 44, 150, 91, 101, 150, 220, 26, 1, 92, 236, 182, 235, 157, 150, 229, 105, 186, 75, 164, 214, 235, 21, 206, 225, 59, 100, 202, 9, 112, 115, 4, 232, 189, 50, 7, 131, 192, 32, 43, 149, 202, 0};

    uint8_t orig_angka [] =  {158, 75, 236, 150, 155, 180, 248, 20, 96, 64, 164, 22, 155, 36, 246, 185, 34, 177, 219, 237, 150, 203, 13, 194, 231, 101, 175, 204, 130, 193, 144, 88, 194, 129, 185, 220, 231, 183, 139, 117, 230, 105, 53, 154, 94, 111, 55, 139, 37, 218, 201, 51, 186, 204, 174, 119, 105, 205, 198, 213, 107, 189, 77, 109, 115, 75, 172, 218, 237, 116, 180, 22, 3, 107, 155, 92, 110, 151, 123, 197, 170, 239, 119, 176, 216, 172, 86, 107, 116, 230, 197, 53, 186, 76, 238, 215, 91, 60, 206, 241, 99, 50, 6, 115, 112, 178, 16, 3, 100, 154, 220, 68, 1, 178, 88, 236, 214, 123, 68, 204, 0, 73, 197, 170, 234, 28, 13, 146, 109, 110, 182, 133, 3, 99, 0, 6, 221, 119, 178, 92, 166, 230, 128, 216, 238, 214, 59, 162, 248, 139, 212, 170, 254, 170, 173, 170, 225, 112, 37, 6, 113, 99, 188, 91, 64, 129, 154, 89, 1, 193, 12, 6, 235, 109, 155, 77, 45, 179, 75, 89, 152, 55, 91, 149, 154, 109, 116, 189, 92, 111, 51, 59, 189, 218, 231, 110, 189, 88, 166, 246, 27, 196, 214, 225, 120, 153, 88, 110, 215, 43, 45, 214, 195, 102, 154, 165, 3, 116, 187, 76, 231, 19, 43, 181, 218, 209, 100, 177, 216, 102, 214, 233, 189, 234, 109, 50, 188, 220, 108, 86, 59, 181, 170, 111, 56, 186, 217, 102, 211, 107, 93, 198, 113, 113, 51, 6, 195, 109, 179, 216, 237, 246, 203, 99, 240, 55, 59, 44, 128, 32, 139, 77, 186, 185, 34, 159, 79, 44, 150, 155, 176, 144, 34, 0, 220, 238, 115, 208, 208, 110, 22, 27, 117, 150, 217, 45, 177, 91, 236, 151, 153, 0, 80, 50, 217, 140, 212, 124, 42, 101, 189, 152, 27, 105, 80, 37, 224, 221, 65, 65, 178, 28, 130, 26, 12, 130, 231, 105, 186, 72, 19, 193, 178, 221, 37, 146, 11, 45, 204, 36, 43, 53, 154, 203, 114, 6, 6, 223, 99, 186, 220, 138, 1, 1, 4, 36, 16, 128, 70, 1, 92, 6, 201, 32, 73, 4, 80, 27, 149, 134, 233, 105, 183, 155, 2, 166, 13, 150, 220, 104, 16, 168, 54, 224, 32, 110, 65, 0, 203, 164, 214, 235, 21, 206, 225, 59, 158, 75, 222, 130, 127, 4, 20, 80, 64, 153, 1, 178, 79, 92, 1, 177, 177, 131, 108, 176, 182, 131, 101, 175, 204, 130, 193, 75, 4, 40, 27, 157, 204, 80, 43, 133, 133, 52, 27, 100, 180, 104, 113, 96, 66, 7, 180, 219, 134, 193, 59, 20, 164, 219, 21, 190, 201, 121, 144, 5, 3, 45, 152, 205, 71, 194, 166, 91, 238, 86, 91, 105, 80, 37, 224, 221, 65, 65, 178, 28, 130, 26, 12, 130, 231, 105, 186, 72, 44, 54, 219, 45, 210, 89, 32, 178, 220, 194, 66, 179, 89, 172, 183, 32, 96, 109, 246, 59, 173, 200, 160, 16, 16, 66, 65, 8, 4, 96, 21, 192, 108, 146, 4, 144, 71, 150, 153, 204, 166, 147, 41, 4, 242, 94, 238, 19, 224, 32, 162, 130, 4, 194, 13, 145, 252, 43, 27, 0, 54, 203, 11, 80, 54, 90, 252, 200, 44, 18, 144, 66, 129, 185, 220, 231, 183, 139, 117, 230, 105, 53, 154, 94, 111, 32, 224, 220, 111, 19, 91, 44, 220, 32, 59, 165, 214, 115, 56, 188, 89, 236, 179, 155, 133, 146, 209, 97, 178, 77, 110, 51, 59, 181, 146, 199, 102, 179, 218, 38, 96, 2, 78, 45, 87, 91, 197, 142, 221, 57, 18, 6, 201, 54, 183, 91, 67, 129, 177, 128, 3, 110, 187, 217, 46, 83, 121, 205, 138, 199, 118, 177, 221, 44, 130, 192, 204, 238, 183, 59, 180, 230, 227, 106, 181, 222, 166, 182, 185, 165, 214, 109, 118, 186, 32, 131, 107, 155, 92, 110, 151, 123, 197, 170, 239, 119, 176, 216, 172, 86, 99, 144, 108, 83, 91, 162, 128, 55, 89, 228, 190, 201, 105, 187, 79, 129, 70, 4, 10, 65, 105, 178, 79, 107, 146, 43, 29, 190, 217, 108, 176, 220, 46, 118, 90, 252, 200, 44, 25, 5, 140, 40, 27, 157, 206, 123, 120, 183, 94, 102, 147, 89, 165, 230, 242, 14, 13, 198, 241, 53, 178, 205, 194, 3, 186, 93, 103, 51, 139, 197, 158, 203, 57, 184, 89, 23, 1, 178, 77, 110, 41, 160, 217, 44, 118, 107, 61, 162, 102, 0, 36, 226, 213, 117, 188, 88, 217, 1, 18, 6, 201, 54, 183, 91, 67, 129, 177, 128, 3, 110, 187, 217, 46, 83, 119, 80, 108, 119, 107, 29, 210, 200, 44, 12, 206, 235, 115, 187, 78, 110, 54, 171, 93, 234, 107, 107, 154, 93, 102, 215, 107, 162, 8, 54, 185, 181, 198, 233, 119, 188, 90, 174, 247, 123, 13, 138, 197, 102, 57, 6, 197, 53, 186, 40, 3, 117, 158, 75, 236, 150, 155, 180, 248, 20, 96, 64, 164, 22, 155, 36, 246, 185, 34, 177, 219, 237, 150, 203, 13, 194, 231, 101, 175, 204, 130, 193, 144, 88, 194, 129, 185, 220, 231, 183, 139, 117, 230, 105, 53, 154, 94, 111, 32, 224, 220, 111, 19, 91, 44, 220, 32, 59, 165, 214, 115, 56, 188, 89, 236, 178, 4, 51, 148, 191, 82, 10, 115, 112, 178, 90, 44, 54, 73, 173, 198, 103, 118, 178, 88, 236, 214, 123, 68, 204, 0, 73, 197, 170, 235, 120, 177, 219, 167, 34, 64, 217, 38, 214, 235, 104, 112, 54, 48, 0, 109, 215, 123, 37, 202, 111, 57, 177, 88, 238, 214, 59, 165, 144, 88, 25, 157, 214, 231, 118, 156, 220, 109, 86, 187, 212, 214, 215, 52, 186, 205, 174, 215, 68, 16, 109, 115, 107, 141, 210, 239, 120, 181, 93, 238, 246, 27, 21, 138, 121, 47, 178, 90, 110, 211, 224, 81, 129, 2, 144, 90, 108, 147, 218, 228, 138, 199, 111, 182, 91, 44, 55, 11, 157, 150, 191, 50, 11, 6, 65, 99, 10, 6, 231, 115, 158, 222, 45, 215, 153, 164, 214, 105, 121, 188, 131, 131, 113, 188, 77, 108, 179, 112, 128, 238, 151, 89, 204, 226, 241, 103, 178, 206, 110, 22, 69, 48, 108, 147, 91, 140, 205, 172, 27, 29, 154, 207, 104, 153, 128, 9, 56, 181, 93, 111, 22, 59, 116, 228, 72, 27, 36, 218, 221, 109, 14, 6, 198, 0, 13, 186, 239, 100, 185, 77, 231, 54, 43, 29, 218, 199, 116, 178, 11, 3, 51, 186, 220, 238, 211, 155, 141, 170, 215, 122, 154, 218, 230, 151, 89, 181, 218, 232, 130, 13, 174, 109, 113, 186, 93, 239, 22, 171, 189, 222, 195, 98, 177, 32, 5, 60, 151, 217, 45, 55, 105, 240, 40, 192, 129, 72, 45, 54, 73, 237, 114, 69, 99, 183, 219, 45, 150, 27, 133, 206, 203, 95, 153, 5, 131, 32, 177, 133, 3, 115, 185, 207, 111, 22, 235, 204, 210, 107, 52, 188, 222, 65, 193, 184, 222, 38, 182, 89, 184, 64, 119, 73, 160, 0, 51, 155, 133, 145, 76, 27, 36, 212, 92, 219, 172, 230, 113, 120, 179, 217, 70, 134, 184, 204, 238, 214, 75, 29, 154, 207, 104, 108, 8, 0, 41, 197, 170, 234, 28, 13, 146, 109, 110, 182, 133, 3, 99, 0, 6, 221, 119, 178, 92, 166, 243, 155, 21, 142, 237, 99, 186, 89, 5, 129, 153, 221, 110, 119, 105, 205, 198, 213, 107, 189, 77, 109, 115, 75, 172, 218, 237, 116, 61, 6, 225, 107, 155, 92, 110, 151, 123, 197, 170, 239, 119, 176, 216, 172, 86, 107, 113, 72, 51, 91, 162, 104, 55, 91, 60, 206, 241, 99, 112, 158, 0};

//    uint8_t orig_angka [] =  {158, 75, 236, 150, 155, 180, 248, 10, 24, 8, 10, 65, 105, 178, 79, 107, 146, 43, 29, 190, 217, 108, 176, 220, 46, 118, 90, 252, 202, 185, 34, 144, 88, 237, 150, 27, 157, 206, 123, 120, 183, 94, 102, 147, 89, 165, 230, 243, 120, 183, 92, 111, 19, 91, 44, 220, 16, 14, 233, 117, 156, 206, 47, 22, 123, 44, 230, 225, 100, 180, 88, 108, 147, 91, 140, 206, 237, 100, 177, 217, 172, 246, 137, 152, 0, 36, 226, 213, 117, 188, 88, 237, 211, 155, 181, 146, 201, 54, 183, 91, 102, 115, 59, 29, 142, 199, 110, 187, 217, 46, 83, 121, 205, 138, 199, 118, 177, 221, 44, 151, 107, 36, 206, 235, 115, 187, 78, 110, 54, 171, 93, 234, 107, 107, 154, 93, 102, 215, 107, 165, 162, 195, 107, 155, 92, 110, 151, 123, 197, 170, 239, 119, 176, 216, 172, 86, 107, 116, 230, 197, 53, 186, 76, 238, 215, 91, 60, 206, 241, 99, 181, 92, 46, 19, 91, 92, 226, 199, 120, 182, 216, 239, 19, 75, 36, 226, 199, 112, 154, 221, 109, 179, 105, 165, 182, 105, 107, 180, 88, 110, 183, 43, 52, 218, 233, 122, 184, 222, 102, 119, 123, 181, 206, 221, 122, 177, 77, 236, 55, 137, 173, 194, 241, 50, 176, 221, 174, 86, 91, 173, 134, 205, 53, 181, 93, 238, 151, 105, 156, 226, 101, 118, 187, 90, 44, 150, 59, 12, 218, 221, 55, 189, 77, 166, 87, 155, 137, 252, 21, 170, 111, 56, 186, 217, 102, 211, 107, 93, 198, 113, 113, 189, 88, 172, 54, 219, 59, 176, 60, 128, 16, 34, 211, 110, 174, 72, 167, 211, 203, 37, 166, 236, 251, 13, 92, 145, 92, 44, 54, 235, 45, 178, 91, 98, 183, 217, 47, 50, 11, 133, 134, 91, 49, 154, 135, 193, 83, 45, 247, 43, 45, 182, 65, 105, 184, 92, 238, 182, 217, 5, 146, 223, 108, 183, 220, 164, 23, 59, 77, 210, 65, 97, 182, 217, 110, 146, 201, 5, 150, 230, 9, 5, 102, 179, 89, 110, 87, 73, 5, 190, 199, 117, 185, 92, 172, 183, 43, 45, 210, 65, 99, 186, 203, 36, 23, 59, 45, 146, 65, 110, 178, 200, 45, 247, 43, 13, 210, 211, 111, 144, 89, 44, 182, 203, 45, 184, 104, 10, 231, 101, 183, 92, 236, 183, 43, 77, 210, 93, 38, 183, 88, 174, 119, 9, 220, 242, 94, 122, 5, 62, 2, 134, 66, 131, 180, 217, 16, 64, 147, 161, 235, 243, 42, 228, 137, 46, 57, 131, 196, 60, 90, 103, 50, 154, 76, 164, 11, 229, 23, 139, 117, 230, 105, 53, 154, 94, 111, 55, 139, 117, 198, 241, 53, 178, 205, 193, 0, 238, 151, 89, 204, 226, 241, 103, 178, 206, 110, 22, 75, 69, 134, 201, 53, 184, 204, 238, 214, 75, 29, 154, 207, 104, 153, 128, 2, 78, 45, 87, 91, 197, 142, 221, 57, 187, 89, 44, 147, 107, 117, 182, 103, 51, 177, 216, 236, 118, 235, 189, 146, 229, 55, 156, 216, 172, 119, 107, 29, 210, 201, 118, 178, 76, 238, 183, 59, 180, 230, 227, 106, 181, 222, 166, 182, 185, 165, 214, 109, 118, 186, 90, 44, 54, 185, 181, 198, 233, 119, 188, 90, 174, 247, 123, 13, 138, 197, 102, 183, 78, 108, 83, 91, 164, 206, 237, 117, 79, 127, 79, 97, 128, 0};
    
    int comp_size = sizeof(orig_angka)/sizeof(orig_angka[0]);
    Serial.print("length_angka : ");
    Serial.println(comp_size);
    
    int input_size = 1640;
    polled = comp_size;
    cfg_info cfg;
    cfg.log_lvl = 1;
    cfg.window_sz2 = 7;
    cfg.lookahead_sz2 = 6;
    cfg.decoder_input_buffer_size = 64;
    uint32_t t2 = micros();
    decompress_and_expand_and_check(orig_angka, input_size, &cfg, polled);
    uint32_t t3 = micros();
    Serial.print("Time to decompress: ");
    Serial.println((t3-t2)/1e6,6);
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    for ( ;; )
    {
      delay(3000);
    }   
}



